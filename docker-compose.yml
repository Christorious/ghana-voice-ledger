version: '3.8'

services:
  # Main application build service
  app-builder:
    build:
      context: .
      target: development
      args:
        BUILD_TYPE: debug
    container_name: ghana-voice-ledger-builder
    volumes:
      - .:/app
      - gradle-cache:/root/.gradle
      - android-sdk:/opt/android-sdk
    environment:
      - ANDROID_HOME=/opt/android-sdk
      - GRADLE_OPTS=-Dorg.gradle.daemon=false
    ports:
      - "8080:8080"  # Development server
      - "8081:8081"  # Metro bundler (if using React Native components)
      - "5037:5037"  # ADB server
    networks:
      - dev-network
    stdin_open: true
    tty: true
    
  # Release build service
  release-builder:
    build:
      context: .
      target: builder
      args:
        BUILD_TYPE: release
        KEYSTORE_PASSWORD: ${KEYSTORE_PASSWORD}
        KEY_ALIAS: ${KEY_ALIAS}
        KEY_PASSWORD: ${KEY_PASSWORD}
    container_name: ghana-voice-ledger-release
    volumes:
      - ./keystore:/app/keystore:ro
      - build-outputs:/app/app/build/outputs
    environment:
      - ANDROID_HOME=/opt/android-sdk
      - GRADLE_OPTS=-Dorg.gradle.daemon=false
    networks:
      - dev-network
    profiles:
      - release
      
  # Artifact server for serving built APKs/AABs
  artifact-server:
    build:
      context: .
      target: runtime
    container_name: ghana-voice-ledger-artifacts
    ports:
      - "8090:80"
    volumes:
      - build-outputs:/usr/share/nginx/html/outputs:ro
    networks:
      - dev-network
    profiles:
      - release
      
  # Firebase emulator for local testing
  firebase-emulator:
    image: node:18-alpine
    container_name: ghana-voice-ledger-firebase
    working_dir: /app
    volumes:
      - ./firebase:/app
      - firebase-data:/app/data
    ports:
      - "4000:4000"  # Emulator UI
      - "8085:8085"  # Firestore
      - "9099:9099"  # Auth
      - "5001:5001"  # Functions
      - "8080:8080"  # Hosting
      - "9000:9000"  # Realtime Database
      - "9199:9199"  # Storage
    command: >
      sh -c "
        npm install -g firebase-tools &&
        firebase emulators:start --only firestore,auth,storage --host 0.0.0.0
      "
    networks:
      - dev-network
    profiles:
      - firebase
      
  # Local database for development
  postgres:
    image: postgres:15-alpine
    container_name: ghana-voice-ledger-db
    environment:
      POSTGRES_DB: voiceledger_dev
      POSTGRES_USER: voiceledger
      POSTGRES_PASSWORD: dev_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    networks:
      - dev-network
    profiles:
      - database
      
  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: ghana-voice-ledger-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - dev-network
    profiles:
      - cache
      
  # Monitoring and logging
  prometheus:
    image: prom/prometheus:latest
    container_name: ghana-voice-ledger-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - dev-network
    profiles:
      - monitoring
      
  grafana:
    image: grafana/grafana:latest
    container_name: ghana-voice-ledger-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - dev-network
    profiles:
      - monitoring
      
  # Documentation server
  docs:
    image: nginx:alpine
    container_name: ghana-voice-ledger-docs
    ports:
      - "8888:80"
    volumes:
      - ./docs:/usr/share/nginx/html:ro
      - ./docs/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - dev-network
    profiles:
      - docs

volumes:
  gradle-cache:
    driver: local
  android-sdk:
    driver: local
  build-outputs:
    driver: local
  firebase-data:
    driver: local
  postgres-data:
    driver: local
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  dev-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16