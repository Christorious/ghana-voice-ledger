#!/bin/bash

# Ghana Voice Ledger Build Optimization Script
# This script optimizes the build process and manages build artifacts

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(dirname "$SCRIPT_DIR")"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Clean Gradle cache and build directories
clean_gradle_cache() {
    log_info "Cleaning Gradle cache and build directories..."
    
    cd "$PROJECT_ROOT"
    
    # Clean project
    ./gradlew clean
    
    # Clean Gradle cache
    if [ -d "$HOME/.gradle/caches" ]; then
        log_info "Cleaning Gradle caches directory..."
        rm -rf "$HOME/.gradle/caches"
    fi
    
    # Clean Gradle daemon
    ./gradlew --stop
    
    log_success "Gradle cache cleaned"
}

# Optimize Gradle properties
optimize_gradle_properties() {
    log_info "Optimizing Gradle properties..."
    
    local gradle_props="$PROJECT_ROOT/gradle.properties"
    local temp_props="$gradle_props.tmp"
    
    # Backup original file
    cp "$gradle_props" "$gradle_props.backup"
    
    # Create optimized properties
    cat > "$temp_props" << EOF
# Gradle Optimization Properties
# Generated by optimize-build.sh

# Enable Gradle daemon
org.gradle.daemon=true

# Enable parallel builds
org.gradle.parallel=true

# Enable configuration cache
org.gradle.configuration-cache=true

# Enable build cache
org.gradle.caching=true

# Increase heap size
org.gradle.jvmargs=-Xmx4g -XX:MaxMetaspaceSize=512m -XX:+HeapDumpOnOutOfMemoryError

# Enable incremental compilation
kotlin.incremental=true
kotlin.incremental.android=true

# Enable non-transitive R classes
android.nonTransitiveRClass=true

# Enable resource optimization
android.enableResourceOptimizations=true

# Use AndroidX
android.useAndroidX=true

# Enable Jetifier
android.enableJetifier=true

# R8 optimizations
android.enableR8.fullMode=true

# Disable unnecessary features for faster builds
android.enableBuildCache=true
android.enableD8.desugaring=true

# Kapt optimizations
kapt.incremental.apt=true
kapt.use.worker.api=true
kapt.include.compile.classpath=false

# Kotlin compiler optimizations
kotlin.compiler.execution.strategy=in-process

EOF
    
    # Append any existing custom properties
    if [ -f "$gradle_props" ]; then
        echo "" >> "$temp_props"
        echo "# Existing custom properties" >> "$temp_props"
        grep -v "^#" "$gradle_props" | grep -v "^$" | grep -v "org.gradle" | grep -v "android\." | grep -v "kotlin\." | grep -v "kapt\." >> "$temp_props" || true
    fi
    
    mv "$temp_props" "$gradle_props"
    
    log_success "Gradle properties optimized"
}

# Setup build cache
setup_build_cache() {
    log_info "Setting up build cache..."
    
    local cache_dir="$HOME/.gradle/build-cache"
    mkdir -p "$cache_dir"
    
    # Create build cache settings
    local init_script="$HOME/.gradle/init.gradle"
    cat > "$init_script" << EOF
// Build cache configuration
gradle.settingsEvaluated { settings ->
    settings.buildCache {
        local {
            directory = new File('$cache_dir')
            removeUnusedEntriesAfterDays = 7
        }
    }
}
EOF
    
    log_success "Build cache configured"
}

# Analyze build performance
analyze_build_performance() {
    log_info "Analyzing build performance..."
    
    cd "$PROJECT_ROOT"
    
    # Run build with profiling
    ./gradlew assembleGhanaDebug --profile --build-cache --parallel
    
    # Find the latest profile report
    local reports_dir="$PROJECT_ROOT/build/reports/profile"
    if [ -d "$reports_dir" ]; then
        local latest_report=$(find "$reports_dir" -name "profile-*.html" | sort | tail -1)
        if [ -n "$latest_report" ]; then
            log_success "Build profile report generated: $latest_report"
        fi
    fi
}

# Optimize dependencies
optimize_dependencies() {
    log_info "Optimizing dependencies..."
    
    cd "$PROJECT_ROOT"
    
    # Generate dependency report
    ./gradlew app:dependencies > dependency-report.txt
    
    # Check for duplicate dependencies
    log_info "Checking for duplicate dependencies..."
    ./gradlew app:dependencyInsight --dependency androidx.core:core-ktx || true
    
    # Generate dependency tree
    ./gradlew app:dependencyTree > dependency-tree.txt || true
    
    log_success "Dependency analysis completed"
}

# Setup incremental builds
setup_incremental_builds() {
    log_info "Setting up incremental builds..."
    
    # Create .gitignore entries for build optimization
    local gitignore="$PROJECT_ROOT/.gitignore"
    
    # Add build optimization entries if not present
    if ! grep -q "# Build optimization" "$gitignore" 2>/dev/null; then
        cat >> "$gitignore" << EOF

# Build optimization
.gradle/
build/
*.iml
.idea/
local.properties
dependency-report.txt
dependency-tree.txt
deployment-report-*.txt

# Android Studio
captures/
.externalNativeBuild/
.cxx/

# Keystore files
*.jks
*.keystore

# Environment files
.env

EOF
    fi
    
    log_success "Incremental build setup completed"
}

# Optimize APK size
optimize_apk_size() {
    log_info "Optimizing APK size..."
    
    cd "$PROJECT_ROOT"
    
    # Build release APK with size analysis
    ./gradlew assembleGhanaRelease
    
    # Analyze APK size
    local apk_path=$(find app/build/outputs/apk -name "*.apk" | head -1)
    if [ -n "$apk_path" ]; then
        log_info "APK size: $(du -h "$apk_path" | cut -f1)"
        
        # Generate APK analyzer report if available
        if command -v aapt &> /dev/null; then
            aapt dump badging "$apk_path" > apk-analysis.txt
            log_success "APK analysis saved to apk-analysis.txt"
        fi
    fi
}

# Setup continuous integration optimizations
setup_ci_optimizations() {
    log_info "Setting up CI optimizations..."
    
    # Create gradle wrapper validation
    cd "$PROJECT_ROOT"
    ./gradlew wrapper --gradle-version=8.5
    
    # Validate wrapper
    ./gradlew --version
    
    log_success "CI optimizations configured"
}

# Generate build optimization report
generate_optimization_report() {
    log_info "Generating optimization report..."
    
    local report_file="$PROJECT_ROOT/build-optimization-report.md"
    
    cat > "$report_file" << EOF
# Build Optimization Report

Generated: $(date)

## Gradle Configuration
- Daemon: Enabled
- Parallel builds: Enabled
- Configuration cache: Enabled
- Build cache: Enabled
- Heap size: 4GB

## Build Performance
- Incremental compilation: Enabled
- R8 full mode: Enabled
- Non-transitive R classes: Enabled
- Resource optimizations: Enabled

## Dependencies
- AndroidX: Enabled
- Jetifier: Enabled
- Kapt optimizations: Enabled

## Cache Configuration
- Build cache location: ~/.gradle/build-cache
- Cache retention: 7 days

## Recommendations
1. Use \`--build-cache\` flag for faster builds
2. Use \`--parallel\` flag for parallel execution
3. Keep Gradle daemon running between builds
4. Regularly clean build cache if disk space is limited
5. Use \`--profile\` flag to analyze build performance

## Build Commands
\`\`\`bash
# Fast debug build
./gradlew assembleGhanaDebug --build-cache --parallel

# Release build with optimization
./gradlew assembleGhanaRelease bundleGhanaRelease --build-cache --parallel

# Clean and rebuild
./gradlew clean assembleGhanaDebug --build-cache --parallel

# Profile build performance
./gradlew assembleGhanaDebug --profile --build-cache --parallel
\`\`\`

EOF
    
    log_success "Optimization report generated: $report_file"
}

# Main optimization function
main() {
    local action=${1:-all}
    
    case $action in
        clean)
            clean_gradle_cache
            ;;
        properties)
            optimize_gradle_properties
            ;;
        cache)
            setup_build_cache
            ;;
        analyze)
            analyze_build_performance
            ;;
        dependencies)
            optimize_dependencies
            ;;
        incremental)
            setup_incremental_builds
            ;;
        apk)
            optimize_apk_size
            ;;
        ci)
            setup_ci_optimizations
            ;;
        report)
            generate_optimization_report
            ;;
        all)
            log_info "Running full build optimization..."
            clean_gradle_cache
            optimize_gradle_properties
            setup_build_cache
            setup_incremental_builds
            setup_ci_optimizations
            generate_optimization_report
            log_success "Build optimization completed!"
            ;;
        *)
            log_error "Unknown action: $action"
            log_info "Available actions: clean, properties, cache, analyze, dependencies, incremental, apk, ci, report, all"
            exit 1
            ;;
    esac
}

# Show usage if no arguments
if [ $# -eq 0 ]; then
    echo "Usage: $0 [action]"
    echo "Actions:"
    echo "  clean        - Clean Gradle cache and build directories"
    echo "  properties   - Optimize Gradle properties"
    echo "  cache        - Setup build cache"
    echo "  analyze      - Analyze build performance"
    echo "  dependencies - Optimize dependencies"
    echo "  incremental  - Setup incremental builds"
    echo "  apk          - Optimize APK size"
    echo "  ci           - Setup CI optimizations"
    echo "  report       - Generate optimization report"
    echo "  all          - Run all optimizations (default)"
    echo ""
    echo "Example: $0 clean"
    exit 0
fi

main "$@"